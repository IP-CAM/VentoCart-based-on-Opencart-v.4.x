<div id="modal-image" class="modal">
  <div id="filemanager" class="modal-dialog modal-lg">
    <div  class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">{{ heading_title }}</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div data-filename="" id="cropper">
        <H3>{{title_crop}}</H3>
        <div class="d-flex justify-content-center align-items-center">
            <a href="#" id="rotateLeft" class="btn btn-light m-1"><i class="fa fa-undo-alt"></i></a>
            
            <!-- Set Ratio Button -->
            <button id="set-ratio-button" class="btn btn-primary m-1">{{entry_set_ratio}}</button>
            
            <!-- Radio Inputs -->
            <div class="form-check form-check-inline m-1">
                <input class="form-check-input" checked type="radio" name="ratio" id="radio-1" value="1/1">
                <label class="form-check-label" for="radio-1">1:1</label>
            </div>
            <div class="form-check form-check-inline m-1">
                <input class="form-check-input" type="radio" name="ratio" id="radio-2" value="16/9">
                <label class="form-check-label" for="radio-2">16:9</label>
            </div>
            
            <!-- Clear Button -->
            <button id="clear-button" class="btn btn-danger m-1">{{btn_clear_ratio}}</button>
        
            <a href="#" id="rotateRight" class="btn btn-light m-1"><i class="fa fa-redo-alt"></i></a>
        </div>
        
        
        <!-- leftbox --> 
      
            <div class="result"></div>
       
        <!-- rightbox -->
        <div class="box-2 img-result hide">
            <!-- result of crop -->
            <img class="cropped d-none" src="" alt="">
        </div> 
        <a href="" class="btn btn-primary btn-block download hide d-none">Download</a>
        <div class="btn-group" style="width: 100%" role="group" aria-label="Button group"> 
            
            <button style="width: 100%" class="btn btn-primary btn-block save">{{button_save}}</button>  
            <button style="width: 100%" class="btn btn-light btn-block cancelcrop">{{button_cancel}}</button>
        </div>
        
    </div>
    
      <div id="mod-content"  class="modal-body">


      </div>
     
    </div>
  </div>
</div>
  <link rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/cropper/2.3.4/cropper.min.css'>
 <style>
    .page {
	margin: 1em auto;
	max-width: 768px;
	display: flex;
	align-items: flex-start;
	flex-wrap: wrap;
	height: 100%;
}
#cropper {
    padding: 10px;
}
.box {
	padding: 0.5em;
	width: 100%;
	margin:0.5em;
}

.box-2 {
	padding: 0.5em;
	width: 100%;
}

.options label,
.options input{
	width:4em;
	padding:0.5em 1em;
}
 
 
img {
	max-width: 100%;
}
.checked-thumbnail {
    border: 2px solid #ff5400; /* Orange border */
    box-shadow: 0 0 5px rgba(255, 165, 0, 0.5); /* Orange shadow */
}

</style>

  <script src='https://cdnjs.cloudflare.com/ajax/libs/cropperjs/0.8.1/cropper.min.js'></script>
  <script > 
    $('#modal-image *').off();
    $('#modal-image *').unbind();
    // Initialize variables
var cropper = null;
var image = null;
var tempFiles = [];
var atFile = -1;
var save = document.querySelector('.save');
var dwn = document.querySelector('.download');
var cropped = null;
 var multiselect = false;
//add multiple images to product
var urlParams = new URLSearchParams(window.location.search);
if (urlParams.has('route') && urlParams.get('route') === 'catalog/product.form' && (document.querySelector('.nav-tabs .nav-link.active').getAttribute('href') == "#tab-image" || document.querySelector('.nav-tabs .nav-link.active').getAttribute('href') == "#tab-general")) {
    multiselect = true;
 
$(document).ready(function() {
    $(document).on('change', 'input[name="path[]"]', function() {
      
            
       
        var checkedCount = $('input[name="path[]"]:checked').length;
       
        if (checkedCount > 0) {
            $('#addMutli').removeClass('d-none');
            $('#addMutli').html('<i class="fas fa-plus-circle"></i> {{button_add}} ' + '(' +  checkedCount + ')')
        } else {
            $('#addMutli').html('<i class="fas fa-plus-circle"></i> {{button_add}} ');
            $('#addMutli').addClass('d-none');
        }
    });
});
 
 
if (typeof flManagerScripts == 'undefined') {
    var flManagerScripts = true;
$(document).on('click', '#addMutli', function() {
  
        $('input[name="path[]"]:checked').each(function(index) {
            let imgSrc = $(this).data('imgsrc');
        
            if (document.querySelector('.nav-tabs .nav-link.active').getAttribute('href') == "#tab-general") {
        
                if (getFileType(imgSrc)  === 'video') {
           
                    tinymce.activeEditor.insertContent('<video style="width: 200px;" controls><source  src="'+imgSrc+'" type="video/mp4"//></video>');
                } else {
                     
                    tinymce.activeEditor.insertContent('<img width="40%" src="'+imgSrc+'" alt="">');
                }
            } else {
            

            let value = $(this).val()
            if (value == '' || typeof value == undefined) { return; }
            if (targetElement) {
                
                if (getFileType(value) === 'video') {
                    let $video = $('<video style="max-height: 190px;object-fit: cover;" id="' + '#'+targetElement.attr('id') + '" controls>');
                    $video.append('<source src="' + imgSrc + '" type="video/mp4"/>');
                    $('#'+targetElement.attr('id')).replaceWith($video);
                } else {
                targetElement.attr('src', imgSrc);
             

                }
                $('#input-'+targetElement.attr('id')).val('catalog/'+value);
                targetElement = null;
                } else {
            let newRow = $('#new-image-template').clone();
            let newCount = $('#image-sortable-container').find(".image-sortable").length + 1;
            newRow.removeAttr('id');
           
            // Update the regex to match any text with row_placeholder
            let newHtml = newRow.html().replace(/row_placeholder/g, newCount);
            newHtml = newHtml.replace(/xxxxx/g, '');

            newRow.html(newHtml);
            newRow.removeClass('d-none');
            newRow.find('input[type="hidden"]').val('catalog/'+value);
           
          $('#image-sortable-container').append(newRow);
           
            updateImageSortOrder();
            
        
            let keepId = 'product-image-' + newCount;
                  
            if (getFileType(value) === 'video') {
          
                    // Replace with video element
                    let $video = $('<video id="' + keepId + '" controls>');
                    $video.append('<source src="' + imgSrc + '" type="video/mp4"/>');
                    newRow.find('img').replaceWith($video);
                   
                } else {
                  
                    // Replace with image element
                     
                    newRow.find('img').attr('src', imgSrc);
                  
                }
      
                }
             
            }

        });
        $('#modal-image').modal('hide');
    });
}
    function getFileType(filename) {
        var ext = filename.split('.').pop().toLowerCase();
        if (['avi', 'mkv', 'mp4'].indexOf(ext) !== -1) {
            return 'video';
        } else {
            return 'image';
        }
    }



}
// Function to convert a data URI to a Blob
function dataURItoBlob(dataURI) {
    let byteString = atob(dataURI.split(',')[1]);
    let ab = new ArrayBuffer(byteString.length);
    let ia = new Uint8Array(ab);
    for (let i = 0; i < byteString.length; i++) {
        ia[i] = byteString.charCodeAt(i);
    }
    return new Blob([ab], { type: 'image/png' });
}

// Rotate image left
$('#rotateLeft').on('click', function (e) {
    e.preventDefault();
    cropper.rotate(-90);
});

// Rotate image right
$('#rotateRight').on('click', function (e) {
    e.preventDefault();
    cropper.rotate(90);
});

// Save image on click
save.addEventListener('click', function (e) {
    e.preventDefault();
  
    // Get result as data URI
    let imgSrc = cropper.getCroppedCanvas({}).toDataURL();
    
    // Show cropped image
 
    cropped.src = imgSrc;
   
    dwn.download = $('#cropper').data('filename');
    dwn.setAttribute('href', imgSrc);
 
    // Create a FormData object
    let formData = new FormData();
    formData.append('file[]', dataURItoBlob(imgSrc), $('#cropper').data('filename'));

    // Define the URL where you want to upload the image
 

    let url = 'index.php?route=common/filemanager.upload&user_token={{ user_token }}';

    var directory = $('#input-directory').val();
 
if (directory) {
    
    url += '&directory=' + encodeURIComponent(directory);
}
   
 

    // Make an AJAX request to upload the image
    $.ajax({
        url: url,
        type: 'post',
        dataType: 'json',
        data: formData,
        cache: false,
        contentType: false,
        processData: false,
        beforeSend: function () {
            // Add loading or button disable logic here
        },
        complete: function () {
            // Add logic to re-enable buttons or handle completion here
        },
        success: function (json) {
            if (json['error']) {
                     //remove cropper generated html
    
                $('.result').html('');
                   $('#mod-content').show();
cropAndSnapShot();
                alert(json['error']);
            }
            if (json['success']) {
           
                //remove cropper generated html
           $('#mod-content').show();
cropAndSnapShot();
                $('.result').html('');
                $('#button-refresh').trigger('click');
                setTimeout(() => {
                    alert(json['success']);
                },100)
                
            }
        },
        error: function (xhr, ajaxOptions, thrownError) {
            //x console.log(thrownError + "\r\n" + xhr.statusText + "\r\n" + xhr.responseText);
        }
    });
}); 
var urlParams = new URLSearchParams(window.location.search);
  var url = '';
 
if ($('#input-directory').val()) {
    
    url += '&directory=' + encodeURIComponent($('#input-directory').val());
}  
 
 $('#modal-image .modal-body').load('index.php?route=common/filemanager.list&user_token={{ user_token }}' + url);

 

 
  $('#cropper').hide();
  $('#modal-image').on('click', '#button-parent', function (e) {
      e.preventDefault();
  
      $('#modal-image .modal-body').load($(this).attr('href'));
  });

  $('#modal-image').on('click', '#button-refresh', function (e) {
   
      e.preventDefault();

      $('#modal-image .modal-body').load($(this).attr('href'));
  });

  $('#modal-image').on('keydown', '#input-search', function (e) {
      if (e.which == 13) {
          $('#button-search').trigger('click');
      }
  });

  $('#modal-image').on('click', '#button-search', function (e) {
      var url = 'index.php?route=common/filemanager.list&user_token={{ user_token }}';

      var directory = $('#input-directory').val();

      if (directory) {
          url += '&directory=' + encodeURIComponent(directory);
      }

      var filter_name = $('#input-search').val();

      if (filter_name) {
          url += '&filter_name=' + encodeURIComponent(filter_name);
      }

    {% if thumb %}
      url += '&thumb={{ thumb|escape('js') }}';
    {% endif %}

    {% if target %}
      url += '&target={{ target|escape('js') }}';
    {% endif %}

    {% if ckeditor %}
      url += '&ckeditor={{ ckeditor|escape('js') }}';
    {% endif %}

      $('#modal-image .modal-body').load(url);
  });

  $('#modal-image').on('click', '#button-upload', function () {
      
  var snapshotFile = null
      $('#form-upload').remove();

      $('body').prepend('<form enctype="multipart/form-data" id="form-upload" style="display: none;"><input type="file" name="file[]" value="" multiple="multiple"/></form>');
   
      $('#form-upload input[name=\'file[]\']').trigger('click');

      $('#form-upload input[name=\'file[]\']').on('change', function () {
     tempFiles = this.files;
     atFile = -1;
 
cropAndSnapShot();
});



 

      if (typeof timer != 'undefined') {
          clearInterval(timer);
      }
   
      timer = setInterval(function () {
          if ($('#form-upload input[name=\'file[]\']').val() !== '') {
                   let formData = new FormData($('#form-upload')[0]); 
             formData.append('file[]', snapshotFile);
              clearInterval(timer);
             uploadFiles(formData);
          }
      }, 500);
  });
 
function uploadFiles(formData) {
        let url = 'index.php?route=common/filemanager.upload&user_token={{ user_token }}';
        let directory = $('#input-directory').val();

        if (directory) {
                 url += '&directory=' + encodeURIComponent(directory);
        }

        $.ajax({
            url: url,
            type: 'POST',
            dataType: 'json',
            data: formData,
            cache: false,
            processData: false,
            contentType: false,
            success: function (response) {
              
                       alert(response['success']);
                          $('#button-refresh').trigger('click');
            },
            error: function (error) {
                console.error('Upload error:', error);
            },
        });
    }
  $('#modal-image').on('click', '#button-folder', function () {
        
      $('#modal-folder').slideToggle();
  });

  $('#modal-image').on('click', '#button-create', function () {
      var url = 'index.php?route=common/filemanager.folder&user_token={{ user_token }}';
      var directory = $('#input-directory').val();
      if (directory) {
          url += '&directory=' + encodeURIComponent(directory);
      }
      $.ajax({
          url: url,
          type: 'post',
          dataType: 'json',
          data: 'folder=' + encodeURIComponent($('#input-folder').val()),
          beforeSend: function () {
              $('#button-create').button('loading');
          },
          complete: function () {
              $('#button-create').button('reset');
          },
          success: function (json) {
              if (json['error']) {
                  alert(json['error']);
              }

              if (json['success']) {
                  alert(json['success']);

                  $('#button-refresh').trigger('click');
              }
          },
          error: function (xhr, ajaxOptions, thrownError) {
              //x console.log(thrownError + "\r\n" + xhr.statusText + "\r\n" + xhr.responseText);
          }
      });
  });

  $('#modal-image').on('click', '#button-delete', function (e) {

   
      if (confirm('{{ text_confirm }}')) {
          $.ajax({
              url: 'index.php?route=common/filemanager.delete&user_token={{ user_token }}',
              type: 'post',
              dataType: 'json',
              data: $('input[name^=\'path\']:checked'),
              beforeSend: function () {
                  $('#button-delete').button('loading');
              },
              complete: function () {
                  $('#button-delete').button('reset');
              },
              success: function (json) {
                  if (json['error']) {
                      alert(json['error']);
                  }

                  if (json['success']) {
                      alert(json['success']);

                      $('#button-refresh').trigger('click');
                  }
              },
              error: function (xhr, ajaxOptions, thrownError) {
                  //x console.log(thrownError + "\r\n" + xhr.statusText + "\r\n" + xhr.responseText);
              }
          });
      }
  });

  $('#modal-image').on('click', 'a.directory', function (e) {
    
      e.preventDefault();
      $('#modal-image .modal-body').load($(this).attr('href'));
  });
 
  $('#modal-image').on('click', 'a.thumbnail', function (e) {
    e.preventDefault();
    if (multiselect) {
    $(this).find("img").toggleClass('checked-thumbnail');
    $(this).find("video").toggleClass('checked-thumbnail');
    $(this).find('.form-check-input').prop("checked", function(i, value) {
    return !value;
});
$(this).find('.form-check-input').trigger('change');
} else {
    $(this).find('.form-check-input').prop("checked", function(i, value) {
    return !value;
});

}
 
  });
  $('#modal-image').on('dblclick', 'a.thumbnail', function (e) {
//handle single select
if (multiselect == true) { return; }
let val = '';
      let type = 'img';
      val = $(this).find('img').attr('src');
      if (typeof val === 'undefined') {
        type = 'video';
        val = $(this).find('source').attr('src');
      }
   
      let $thumbnail = $('{{ thumb|escape('js') }}');
      let keepId = "{{ thumb|escape('js') }}".replace('#','');
 
if (type === 'video') {
    // Replace with video element
    var $video = $('<video id="' + keepId + '" controls>');
    $video.append('<source src="' + val + '" type="video/mp4">');
    $thumbnail.replaceWith($video);
} else {
    // Replace with image element
    var $image = $('<img id="' + keepId + '" >');
    $image.attr('src', val);
    $thumbnail.replaceWith($image);
}
 
$('{{ target|escape('js') }}').val('catalog/'+ $(this).find('.form-check-input').val())
 $('#modal-image').modal('hide');


  });
  $('#modal-image').on('click', '.pagination a', function (e) {
      e.preventDefault();
     
      $('#modal-image .modal-body').load($(this).attr('href'));
  });

  
 
  $('#cropper').on('click', '.cancelcrop', function () {
   
cropAndSnapShot();
   
    $('#mod-content').show();
  });
  $('#modal-image').on('click', '#button-crop', function () {
    // Check if more than one checkbox is selected
    var selectedCheckboxes = $('input[name="path[]"]:checked');
    if (selectedCheckboxes.length !== 1) {
        alert("{{text_only_one_crop}}");
        return;
    }
    
      cropped = document.querySelector('.cropped');
    let selectedImage = selectedCheckboxes.closest('.thumbnail').find('img');
    let imgSrc = selectedImage.attr('src');
    $('#mod-content').hide();
    let randomNumber = Math.floor(1000 + Math.random() * 9000);
    let originalFilename = imgSrc.substring(imgSrc.lastIndexOf('/') + 1);
    let newFilename = 'cropped_' + randomNumber + '_' + originalFilename;
    $('#cropper').data('filename', newFilename);


    // Show the cropper
    $('#cropper').show();

    // Append the selected image to the cropper
    let result = document.querySelector('.result');
    result.innerHTML = ''; // Clear previous content
    let image = new Image();
    image.src = imgSrc;
    result.appendChild(image);

    // Initialize the cropper
    cropper = new Cropper(image, {
  
        viewMode: 1 // Set the view mode
    });
});
// Set Ratio Button Click Event
$('#set-ratio-button').click(function() {
    // Get the selected ratio from the radio inputs
    var selectedRatio = $('input[name="ratio"]:checked').val();
    
    // Set the ratio in the cropper
    cropper.setAspectRatio(eval(selectedRatio));
});

// Clear Button Click Event
$('#clear-button').click(function() {
    // Clear the aspect ratio constraint
    cropper.setAspectRatio(eval('0/0'));
});


  
 function cropAndSnapShot() {
    atFile++;
    if (cropper) {
        cropper.destroy(); //destroy old cropper.
        $('#cropper').hide();
    }

    if (!tempFiles?.[atFile]) {
       
        return;
    }

     if ((tempFiles[atFile].size / 1024) > {{ config_file_max_size }}) { 
       $(this).val('');
       alert('{{ error_upload_size }}');
     }

    var file = tempFiles[atFile]; // Get the selected file
    let videoExt = ['avi', 'mp4', 'mkv']; // Allowed video extensions
    var snapshotFile = null
    // File extension check
    let fileExtension = file.name.split('.').pop().toLowerCase(); // Extract file extension

    if (videoExt.includes(fileExtension)) {
        // Create video and canvas elements on the fly
        let video = document.createElement('video');
        let canvas = document.createElement('canvas');
        let ctx = canvas.getContext('2d');

        // Set up the video
        video.src = URL.createObjectURL(file);
        video.muted = true; // Mute video to avoid autoplay sound issues
        video.playsInline = true; // For consistent behavior across devices

        // Wait for the video to load metadata
        video.addEventListener('loadeddata', function() {
            // Get the duration of the video
            let videoDuration = video.duration;

            // Calculate snapshot time as 20% of the video's duration or use 3 seconds as a fallback
            let snapshotTime = Math.min(videoDuration * 0.2, 3);
            video.currentTime = snapshotTime; // Seek to 3 second to ensure the video has loaded enough frames
        });

        // Capture the snapshot when the video is ready
        video.addEventListener('seeked', function() {
            // Set canvas dimensions to match video
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;

            // Draw the video frame on the canvas
            ctx.drawImage(video, 0, 0, video.videoWidth, video.videoHeight);

            // Convert canvas to a Blob
            canvas.toBlob(function(blob) {
                // Create a new file object for the snapshot
                let originalFileName = file.name.substring(0, file.name.lastIndexOf('.')) || file.name;

                // Create the snapshot file with the original base name and .png extension
                snapshotFile = new File([blob], `${originalFileName}.png`, {
                    type: 'image/png'
                });

                let formData = new FormData();
                formData.append('file[]', snapshotFile);

                // Proceed with upload
                uploadFiles(formData);
                // Log the form data or send it via AJAX
                console.log('Snapshot added to upload:', snapshotFile);

                // Optional: Clean up
                URL.revokeObjectURL(video.src);
            }, 'image/png');
        });

        // Start video loading
        video.load();
    }

    //We only crop images to keep ratio for catalog (products, categories)
    if (file && window.location.href.indexOf("index.php?route=catalog") !== -1) {

        $('#cropper').data('filename', file.name);
        let image = new Image();
        image.src = URL.createObjectURL(file);

        image.onload = function() {
            var width = this.width;
            var height = this.height;
            var ratio = width / height;

            if (ratio != 1) {
                // Ask for confirmation
                var userConfirmed = window.confirm("{{confirm_image_crop}} \r\rFile: " + file.name);

                if (userConfirmed) {
                    $('#mod-content').hide();
                    $('#cropper').show();

                    result = document.querySelector('.result');
                    img_result = document.querySelector('.img-result');
                    cropped = document.querySelector('.cropped');
                    result.appendChild(image);
                    cropper = new Cropper(image, {
                        aspectRatio: 1,
                        viewMode: 1,
                    });
                        $('#form-upload input[name="file[]"]')[0].files = (function () {
                          const dataTransfer = new DataTransfer();
                         Array.from($('#form-upload input[name="file[]"]')[0].files)
                        .filter(f => f.name !== file.name) // Filter out the file
                        .forEach(f => dataTransfer.items.add(f));  

                           return dataTransfer.files; // Return the new FileList
                        })();
                } else {
                      
          
                        cropAndSnapShot();
                    
                }
                //return; // Since ratio != 1 it needs cropping before uploading.
            } else {
                if (atFile < files.length - 1) {

                    cropAndSnapShot();
                }
            }
        };
    }

}

 </script>
</div> 