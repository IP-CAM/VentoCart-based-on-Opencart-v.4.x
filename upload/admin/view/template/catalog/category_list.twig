<form id="form-category" method="post" data-oc-toggle="ajax" data-oc-load="{{ action }}" data-oc-target="#category">
	<div class="table-responsive">
		<table id="categorysorter" class="table table-bordered table-hover table-striped">
			<thead>
				<tr>
					<td class="text-center" style="width: 1px;"><input type="checkbox"
							onclick="$('input[name*=\'selected\']').prop('checked', $(this).prop('checked'));"
							class="form-check-input" /></td>
					<td class="text-start"><a href="{{ sort_name }}" {% if sort=='name' %} class="{{ order|lower }}" {%
							endif %}>{{ column_name }}</a></td>
					<td class="text-end"><a href="{{ sort_sort_order }}" {% if sort=='sort_order' %}
							class="{{ order|lower }}" {% endif %}>{{ column_sort_order }}</a></td>
					<td class="text-end">{{ column_action }}</td>
				</tr>
			</thead>
			<tbody class="sortable-table">
				{% if categories %}
				{% for category in categories %}
				<tr data-catid="{{category.category_id }}">
					<td class="text-center"><input type="checkbox" name="selected[]" value="{{ category.category_id }}"
							class="form-check-input" /></td>
					<td class="text-start">{{ category.name }}</td>
					<td class="text-end">{{ category.sort_order }}</td>
					<td class="text-end"><a href="{{ category.edit }}" data-bs-toggle="tooltip"
							title="{{ button_edit }}" class="btn btn-primary"><i class="fa-solid fa-pencil"></i></a>
					</td>
				</tr>
				{% endfor %}
				{% else %}
				<tr>
					<td class="text-center" colspan="4">{{ text_no_results }}</td>
				</tr>
				{% endif %}
			</tbody>
		</table>
	</div>
	<div class="row">
		<div class="col-sm-6 text-start">{{ pagination }}</div>
		<div class="col-sm-6 text-end">{{ results }}</div>
	</div>
</form>


<script type="text/javascript" src="view/javascript/Sortable.min.js"></script>
<script>
	$(document).ready(function () {
 
		new Sortable(document.querySelector('.sortable-table'), {
			animation: 150, // Optional animation time in milliseconds
			handle: 'td',   // Restrict drag start click to the specified element
			onEnd: function (evt) {
				// Callback function called after the sorting is completed
				handleSortEnd(evt);
			}
		});

		// Your additional JavaScript logic here
		function handleSortEnd(evt) {
			// This function is called when the sorting operation is completed
			var categoryPositions = {}; // Object to store positions

			// Loop through each row in the table
			$('#categorysorter tbody tr').each(function (index) {
				// Get the value of data-catid attribute
				var catId = $(this).data('catid');

				// Store the data-catid and its position in the object
				categoryPositions[catId] = index;
			});

			// Output the resulting object to the console
			updateSortOrder(reverseObjectKeys(categoryPositions));
		}
		function reverseObjectKeys(obj) {
    return Object.keys(obj).reverse().reduce(function(result, key) {
        result[key] = obj[key];
        return result;
    }, {});
}

	function updateSortOrder(sortObject) {
        // Specify the URL where you want to send the POST request
       
        // Make sure sortObject is not empty
        if ($.isEmptyObject(sortObject)) {
            console.log('Sort object is empty. Nothing to update.');
            return;
        }

        // Make an AJAX POST request
        $.ajax({
            type: 'POST',
			dataType: 'json',
            url: 'index.php?route=catalog/category.updateSortOrder&user_token=' + getUrlParameter('user_token'),
            data: { newSort:  sortObject },
            success: function (response) {
                if (response.status == "ok") {
					$('#alert').prepend('<div class="alert alert-success alert-dismissible"><i class="fa-solid fa-circle-check"></i> Sorting updated. <button type="button" class="btn-close" data-bs-dismiss="alert"></button></div>');
					setTimeout(() => {
                    $(".alert").alert('close');
                }, 5500);
				}
            },
            error: function (error) {
                console.error('Error updating sort order:', error);
            }
        });
    }
});
 
 
function getUrlParameter(name) {
    name = name.replace(/[[]/, '\\[').replace(/[\]]/, '\\]');
    var regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
    var results = regex.exec(location.search);
    return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
}

</script>
<style>
	.sortable-table {
		cursor: grab;
		/* Set cursor to 'grab' for supported browsers */
		cursor: -moz-grab;
		cursor: -webkit-grab;
		user-select: none;
		/* Disable text selection during dragging for better UX */
		border: 1px solid #ccc;
		/* Add a border for visual indication */
		box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.1);
		/* Add a subtle box shadow */
		transition: transform 0.2s ease;
		/* Add a smooth transition effect */
	}

	.sortable-table tr:active {
		cursor: grabbing;
		/* Set cursor to 'grabbing' when the element is being dragged */
		cursor: -moz-grabbing;
		background-color: #005eff;
		cursor: -webkit-grabbing;

	}
</style>