<style>
	.my-handle {
		cursor: grab;
		font-size: 21px;
		cursor: -webkit-grabbing;
		color: #595959;
	}
</style>
<form id="form-category" method="post" data-oc-toggle="ajax" data-oc-load="{{ action }}" data-oc-target="#category">
	<!-- Template seceleton for accordion -->
	<div id="category-id-standby" class="accordion accordion-flush d-none">
		<div class="accordion-item">
			<h2 class="accordion-header" id="flush-headingx}">
				<div class="d-flex align-items-center">
					<button class="flex-grow-1 border  rounded accordion-button collapsed" type="button"
						data-bs-toggle="collapse" data-bs-target="#flush-collapsex" aria-expanded="false"
						aria-controls="flush-collapsex">
						<span class="my-handle" aria-hidden="true">
							<i class="fa-solid mx-2 fa-grip-vertical"></i>
						</span>

					</button>
				</div>
			</h2>
			<div id="flush-collapsex" class="accordion-collapse collapse" aria-labelledby="flush-headingx"
				data-bs-parent="#accordionFlushExample">
				<div class="accordion-body"></div>
			</div>
		</div>
	</div>
	<!-- END //Template seceleton for accordion -->

	{% if categories %}
	<ul class="listWithHandle" id="accordionContainer" style="padding: 0; margin: 0">
	</ul>
	{% endif %}
	</div>

</form>
<style>

</style>

<script type="text/javascript" src="view/javascript/Sortable.min.js"></script>
<script>
	var categories = {{ categories| json_encode | raw }};
	var sortedCategories = Object.values(categories).sort((a, b) => a.sort_order - b.sort_order);
	var superI = sortedCategories.length;
	var processedCategories = {};
	$(document).ready(function () {
	function processCategory(category) {
		let buildHTMLobject = {};
		let newAccordion = $("#category-id-standby").clone();
		newAccordion.attr("id", "category-id-" + category.category_id);
		let listItem = $('<li class="list-group-item"></li>');
		newAccordion.find(".accordion-button").append(category.name);

		let editButton = $('<a>', {
			href: category.edit,
			'data-bs-toggle': 'tooltip',
			class: 'btn btnedit btn-primary',
			'aria-label': 'Edit',
			'data-bs-original-title': 'Edit',
			css: {
				'z-index': 100,
				position: 'absolute',
				right: '50px'
			},
			html: '<i class="fa-solid fa-pencil"></i>'
		});

		newAccordion.find(".accordion-button").append(editButton);
		newAccordion.removeClass("d-none");
		let ariaLabelledById = "accordion-heading-" + category.category_id;
		let ariaControls = "accordion-collapse-" + category.category_id;
		let accbody = "accordion-body-" + category.category_id;
		let accbutton = "accordion-button-" + category.category_id;
		newAccordion.find(".accordion-body").attr("id", accbody);
		newAccordion.find(".accordion-button").attr("id", accbutton);
		newAccordion.find(".accordion-header").attr("id", ariaLabelledById);
		newAccordion.find(".accordion-button").attr("data-bs-target", "#" + ariaControls);
		newAccordion.find(".accordion-button").attr("data-catid", category.category_id);
		newAccordion.find(".accordion-collapse").attr("id", ariaControls);
		newAccordion.find(".accordion-collapse").attr("aria-labelledby", ariaLabelledById);
		newAccordion.find(".accordion-collapse").attr("data-bs-parent", "#" + ariaLabelledById);
		if (category.parent_id == 0 && $("#accordion-body-" + category.category_id).length == 0) {
			newAccordion.appendTo(listItem);
			$("#accordionContainer").append(listItem);
			return true;
		} else {
			if ($("#accordion-body-" + category.parent_id).length > 0 && $("#accordion-body-" + category.category_id).length == 0) {

				if ($("#accordion-body-" + category.parent_id).length < 2) {
					$("#accordion-body-" + category.parent_id).append('<ul class="listWithHandle" id="real-body-ul-' + category.parent_id + '" style="padding: 0; margin: 0"></ul>');
					newAccordion.appendTo(listItem);
					$('#real-body-ul-' + category.parent_id).append(listItem);
				}
				return true;
			} else {
				return false;
			}
		}
	}

	function getCategoryById(categoryId) {
		return sortedCategories.find(category => category.category_id === categoryId);
	}

 
		while (superI > 0) {
			Object.keys(sortedCategories).forEach((categoryId, index) => {
				const category = sortedCategories[categoryId];
				if (category && category.category_id && processCategory(category)) {
					superI--;
				}
			});
			if (superI == 0) {
				initializeSortables();
			}
		}
	 
	$("#accordionContainer .accordion").each(function () {
		var accordionBody = $(this).find(".accordion-body");
		if (accordionBody.text().length < 2) {
			accordionBody.addClass("d-none");
		} else {
			$("#" + accordionBody.attr('id').replace("accordion-body", "accordion-button")).append(' <span class="mx-4"> <i class="fas fa-chevron-down"></i></span>');
		}
	});
	$(".accordion-button").click(function () {
		var accordionBody = $(this).closest(".accordion-item").find(".accordion-body");

		if (accordionBody.text().trim().length < 2) {
			$(this).addClass("collapsed");
		}
	});

	$(document).on("click", ".btnedit", function (event) {
		event.preventDefault(); // Prevent the default behavior of the link
		window.location.href = $(this).attr('href').replace(/&amp;/g, '&');
	});

	function initializeSortables() {
		$('.listWithHandle').each(function () {
			// Check if Sortable instance already exists
			if (!$(this).data('sortable')) {
				// Create Sortable instance
				Sortable.create(this, {
					handle: '.my-handle',
					animation: 150,
					onEnd: function (event) {
						// Update the values after sorting is complete
						handleSortEnd(event);
					}
				});
			}
		});
	}

	function handleSortEnd(evt) {
		var categoryPositions = {};
		$('#accordionContainer .accordion-button').each(function (index) {
			var catId = $(this).data('catid');
			categoryPositions[catId] = index;
		});
		updateSortOrder(reverseObjectKeys(categoryPositions));
	}
	function reverseObjectKeys(obj) {
		return Object.keys(obj).reverse().reduce(function (result, key) {
			result[key] = obj[key];
			return result;
		}, {});
	}

	function updateSortOrder(sortObject) {
		if ($.isEmptyObject(sortObject)) {
			console.log('Sort object is empty. Nothing to update.');
			return;
		}
		$.ajax({
			type: 'POST',
			dataType: 'json',
			url: 'index.php?route=catalog/category.updateSortOrder&user_token=' + getUrlParameter('user_token'),
			data: { newSort: sortObject },
			success: function (response) {
				if (response.status == "ok") {
					$('#alert').prepend('<div class="alert alert-success alert-dismissible"><i class="fa-solid fa-circle-check"></i> Sorting updated. <button type="button" class="btn-close" data-bs-dismiss="alert"></button></div>');
					setTimeout(() => {
						$(".alert").alert('close');
					}, 5500);
				}
			},
			error: function (error) {
				console.error('Error updating sort order:', error);
			}
		});
	}
	function getUrlParameter(name) {
		const params = new URLSearchParams(window.location.search);
		return params.get(name) || '';
	}
});
</script>